{"version":3,"sources":["SeasonDisplay.jsx","Spinner.jsx","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","rootElement","document","getElementById","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render"],"mappings":"+LAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,sBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,eAsBCE,EAZO,SAACC,GACrB,IARiBC,EAAKC,EAQhBC,GARWF,EAQQD,EAAMC,KARTC,GAQc,IAAIE,MAAOC,YAPnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAGC,EAEJP,EAAaS,GAAhCP,EAFuB,EAEvBA,KAAMC,EAFiB,EAEjBA,SACd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aCzBZU,EAAU,SAACP,GACf,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAIjDD,EAAQE,aAAe,CAAED,QAAS,eAEnBD,QCNTG,EAAcC,SAASC,eAAe,QAEtCC,E,4MACJC,MAAQ,CAAEb,IAAK,KAAMc,aAAc,I,kEAEd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEpB,IAAKmB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,aAAcS,EAAIhB,e,sCAI7C,OAAIiB,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMb,IAClC,uCAAawB,KAAKX,MAAMC,eAE5BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMb,IAClC,kBAAC,EAAD,CAAeA,IAAKwB,KAAKX,MAAMb,MAEjC,kBAAC,EAAD,CAASO,QAAQ,wB,+BAIxB,OAAO,yBAAKF,UAAU,cAAcmB,KAAKC,qB,GApB3BC,IAAMC,WAuBxBC,IAASC,OAAO,kBAAC,EAAD,MAASpB,I","file":"static/js/main.949bc7d3.chunk.js","sourcesContent":["import './SeasonDisplay.css'\r\nimport React from \"react\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hit the beach\",\r\n    iconName: \"sun\",\r\n  },\r\n  winter: {\r\n    text: \" Burr, it's chilly\",\r\n    iconName: \"snowflake\",\r\n  },\r\n};\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season];\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\nSpinner.defaultProps = { message: \"Loading....\" };\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nclass App extends React.Component {\r\n  state = { lat: null, errorMessage: \"\" };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => this.setState({ lat: position.coords.latitude }),\r\n      (err) => this.setState({ errorMessage: err.message })\r\n    );\r\n  }\r\n  renderContent() {\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>Error: {this.state.errorMessage}</div>;\r\n    }\r\n    if (!this.state.errorMessage && this.state.lat) {\r\n      return <SeasonDisplay lat={this.state.lat} />;\r\n    }\r\n    return <Spinner message=\"Please wait a sec\" />;\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"border red\">{this.renderContent()}</div>;\r\n  }\r\n}\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}